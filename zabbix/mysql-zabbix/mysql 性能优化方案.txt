在不同的环境下 ，由于内存，访问量，读写频率，数据差异等等情况，可能会出现不同的结果，因此简单地根据某个给出方案来配置mysql是行不通的，最好能使用status信息对mysql进行具体的优化。

一、慢查询
mysql> show variables like '%slow%';
mysql> show global status like '%slow%';
配置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有4148个慢查询，你可以分析慢查询日志，找出有问题的SQL语句，慢查询时间不宜设置过长，否则意义不大，最好在5秒以内，如果你需要微秒级别的慢查询，可以考虑给MySQL打补丁：http://www.percona.com/docs/wiki/release:start，记得找对应的版本。
打开慢查询日志可能会对系统性能有一点点影响，如果你的MySQL是主－从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。
slow_query_log = ON

二、连接数
经常会遇见”MySQL: ERROR 1040: Too many connections”的情况，一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是MySQL配置文件中max_connections值过小：

查询MySQL服务器最大连接数
mysql> show variables like 'max_connections';

查询mysql服务器响应的最大连接数：
mysql> show global status like 'Max_used_connections';

MySQL服务器响应的最大连接数与服务器最大连接数设置是 ≈ 85%
max_connections = 512

三、innodb_buffer_pool_size
innodb_buffer_pool_size是对表性能影响最大的一个参数：
mysql> show variables like 'innodb_buffer_pool_size';

看一下key_buffer_size的使用情况：
mysql> show global status like 'Innodb_buffer_pool_read%';

| Innodb_buffer_pool_read_requests      | 5677658653 |
| Innodb_buffer_pool_reads              | 87618 

key_cache_miss_rate ＝ Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests * 100%
key_cache_miss_rate在0.1%以下都很好（每1000个请求有一个直接读硬盘），如果key_cache_miss_rate在0.01%以下，可以调innodb_buffer_pool_size。
innodb_buffer_pool_size = 4G


四、临时表
mysql> show global status like 'created_tmp%';
| Created_tmp_disk_tables | 31    |
| Created_tmp_files       | 5     |
| Created_tmp_tables      | 5697 

比较理想的配置是：Created_tmp_disk_tables / Created_tmp_tables * 100% <= 25%

我们再看一下MySQL服务器对临时表的配置：
mysql> show variables where variable_name in ('tmp_table_size','max_heap_table_size');
| max_heap_table_size | 16777216 | 内存表容量
| tmp_table_size      | 16777216 | 临时表容量
只有16777216以下的临时表才能全部放内存，超过的就会用到硬盘临时表。
max_heap_table_size = 1024M
tmp_table_size = 1024M

五、Open Table情况
mysql> show global status like 'open%tables%';
| Open_tables   | 807   |表示打开表的数量
| Opened_tables | 828   |表示打开过的表数量

如果Opened_tables数量过大，说明table_open_cache值可能太小，我们查询一下服务器table_cache值：
mysql> show variables like 'table_open_cache';
| table_open_cache | 2000  |
比较合适的值为：
Open_tables / Opened_tables * 100% >= 85%
Open_tables / table_cache * 100% <= 95%

table_open_cache = 2000;

六、进程使用情况
mysql> show global status like 'Thread%';
| Threads_cached    | 4     |
| Threads_connected | 22    |
| Threads_created   | 26    |
| Threads_running   | 1     |
如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁（前提是缓存数未达上限）。Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size配置：

mysql> show variables like 'thread_cache_size';
| thread_cache_size | 9     |


七、查询缓存(query cache)
mysql> show global status like 'qcache%';
| Qcache_free_blocks      | 1       | 缓存中相邻内存块的个数（数目大有碎片）flush query cache
| Qcache_free_memory      | 1031832 | 缓存中的空闲内存
| Qcache_hits             | 0       | 每次查询在缓存中命中时就增大
| Qcache_inserts          | 0       | 每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
| Qcache_lowmem_prunes    | 0       | 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数
| Qcache_not_cached       | 61475   | 不适合进行缓存的查询的数量，查询不是SELECT语句或者用now()函数。
| Qcache_queries_in_cache | 0       | 当前缓存的查询（和响应）的数量
| Qcache_total_blocks     | 1       | 缓存中块的数量

我们再查询一下服务器关于query_cache的配置：
mysql> show variables like 'query_cache%';
| query_cache_limit            | 1048576 | 超过此大小的查询将不缓存
| query_cache_min_res_unit     | 4096    | 缓存块的最小大小
| query_cache_size             | 1048576 | 查询缓存大小
| query_cache_type             | OFF     | 缓存类型
| query_cache_wlock_invalidate | OFF     |有客户端写入，查询是否返回结果还是写完成再读表获取结果。

query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。
查询缓存碎片率： Qcache_free_blocks / Qcache_total_blocks * 100%  
如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者减小query_cache_min_res_unit。

查询缓存利用率: (query_cache_size – Qcache_free_memory) / query_cache_size * 100%
查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小；查询缓存利用率在80％以上而且Qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。

查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%


八、排序使用情况
mysql> show global status like 'sort%';
| Sort_merge_passes | 0       |
| Sort_range        | 12617   |
| Sort_rows         | 1800443 |
| Sort_scan         | 12353   |

mysql> show variables like 'sort%';
| sort_buffer_size | 262144 |

mysql> show variables like 'read_rnd_buffer_size';
| read_rnd_buffer_size | 262144 |

Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?（另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处


九、文件打开数(open_files)
mysql> show global status like 'open_files';
| Open_files    | 9     |

mysql> show variables like 'open_files_limit';
| open_files_limit | 5000  |

比较合适的设置：Open_files / open_files_limit * 100% <= 75％

十、表锁情况
mysql> show global status like 'table_locks%';
| Table_locks_immediate | 1598  |
| Table_locks_waited    | 0     |

Table_locks_immediate表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，
如果Table_locks_immediate / Table_locks_waited > 5000，最好采用InnoDB引擎

十一、表扫描情况
mysql> show global status like 'handler_read%';
| Handler_read_first    | 26383   |
| Handler_read_key      | 4023291 |
| Handler_read_last     | 11      |
| Handler_read_next     | 4349815 |
| Handler_read_prev     | 175449  |
| Handler_read_rnd      | 2114695 |
| Handler_read_rnd_next | 3430400 |

调出服务器完成的查询请求次数：
mysql> show global status like 'com_select';
| Com_select    | 129162 |

计算表扫描率：
表扫描率 ＝ Handler_read_rnd_next / Com_select
如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。
